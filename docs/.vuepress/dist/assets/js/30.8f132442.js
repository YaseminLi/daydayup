(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{252:function(t,a,e){"use strict";e.r(a);var n=e(0),s=Object(n.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"_1-怎么配置单页应用？怎么配置多页应用？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-怎么配置单页应用？怎么配置多页应用？","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.怎么配置单页应用？怎么配置多页应用？")]),t._v(" "),e("ul",[e("li",[t._v("单页面")])]),t._v(" "),e("p",[t._v("单页应用可以理解为webpack的标准模式，直接在entry中指定单页应用的入口即可")]),t._v(" "),e("ul",[e("li",[t._v("多页面")])]),t._v(" "),e("ol",[e("li",[t._v("每个页面都有公共的代码，可以将这些代码抽离出来，避免重复的加载。比如，每个页面都引用了同一套css样式表")]),t._v(" "),e("li",[t._v("随着业务的不断扩展，页面可能会不断的追加，所以一定要让入口的配置足够灵活，避免每次添加新页面还需要修改构建配置")]),t._v(" "),e("li",[t._v("entry设置多个入口："),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("\t\tentry"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        home"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./home.js"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        about"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./about.js"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        contact"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./contact.js"')]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),e("blockquote",[e("p",[t._v("参考："),e("a",{attrs:{href:"https://blog.csdn.net/nongweiyilady/article/details/79255746",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/nongweiyilady/article/details/79255746"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://www.jianshu.com/p/11f5d23484e9",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.jianshu.com/p/11f5d23484e9"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"_2-有哪些常见的loader？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-有哪些常见的loader？","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.有哪些常见的Loader？")]),t._v(" "),e("ul",[e("li",[t._v("file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件")]),t._v(" "),e("li",[t._v("url-loader：和 file-loader 类似，但是能在文件很小的情况下以 base64 的方式把文件内容注入到代码中去")]),t._v(" "),e("li",[t._v("source-map-loader：加载额外的 Source Map 文件，以方便断点调试")]),t._v(" "),e("li",[t._v("image-loader：加载并且压缩图片文件")]),t._v(" "),e("li",[t._v("babel-loader：把 ES6 转换成 ES5")]),t._v(" "),e("li",[t._v("css-loader：加载 CSS，支持模块化、压缩、文件导入等特性")]),t._v(" "),e("li",[t._v("style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS。")]),t._v(" "),e("li",[t._v("eslint-loader：通过 ESLint 检查 JavaScript 代码")])]),t._v(" "),e("h2",{attrs:{id:"_3-有哪些常见的plugin？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-有哪些常见的plugin？","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. 有哪些常见的Plugin？")]),t._v(" "),e("ul",[e("li",[t._v("define-plugin：定义环境变量")]),t._v(" "),e("li",[t._v("html-webpack-plugin：简化html文件创建")]),t._v(" "),e("li",[t._v("uglifyjs-webpack-plugin：通过UglifyES压缩ES6代码")]),t._v(" "),e("li",[t._v("webpack-parallel-uglify-plugin: 多核压缩,提高压缩速度")]),t._v(" "),e("li",[t._v("webpack-bundle-analyzer: 可视化webpack输出文件的体积")]),t._v(" "),e("li",[t._v("mini-css-extract-plugin: CSS提取到单独的文件中,支持按需加载")])]),t._v(" "),e("h2",{attrs:{id:"_4-分别介绍bundle，chunk，module是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-分别介绍bundle，chunk，module是什么","aria-hidden":"true"}},[t._v("#")]),t._v(" 4. 分别介绍bundle，chunk，module是什么")]),t._v(" "),e("ul",[e("li",[t._v("bundle：是由webpack打包出来的文件")]),t._v(" "),e("li",[t._v("chunk：代码块，一个chunk由多个模块组合而成，用于代码的合并和分割")]),t._v(" "),e("li",[t._v("module：模块化编程中，开发者编写的离散功能块，互相之间可以通过引用来产生依赖关系")])]),t._v(" "),e("h2",{attrs:{id:"_5-loader和plugin的不同？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-loader和plugin的不同？","aria-hidden":"true"}},[t._v("#")]),t._v(" 5. Loader和Plugin的不同？")]),t._v(" "),e("ul",[e("li",[t._v("不同的作用:\n"),e("ul",[e("li",[t._v('Loader直译为"加载器"。对模块的源代码进行转换，可以将文件从不同的语言（如 TypeScript）转换为 JavaScript，或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 import CSS文件！')]),t._v(" "),e("li",[t._v('Plugin直译为"插件"。Plugin可以扩展webpack的功能，让webpack具有更多的灵活性。 在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。')])])]),t._v(" "),e("li",[t._v("不同的用法:\n"),e("ul",[e("li",[t._v("Loader在module.rules中配置，也就是说他作为模块的解析规则而存在。 类型为数组，每一项都是一个Object，里面描述了对于什么类型的文件（test），使用什么加载(loader)和使用的参数（options）")]),t._v(" "),e("li",[t._v("Plugin在plugins中单独配置。 类型为数组，每一项是一个plugin的实例，参数都通过构造函数传入。")])])])]),t._v(" "),e("h2",{attrs:{id:"_6-构建流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-构建流程","aria-hidden":"true"}},[t._v("#")]),t._v(" 6. 构建流程")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://img.alicdn.com/tps/TB1GVGFNXXXXXaTapXXXXXXXXXX-4436-4244.jpg",target:"_blank",rel:"noopener noreferrer"}},[t._v("流程图"),e("OutboundLink")],1),e("a",{attrs:{href:"https://fed.taobao.org/blog/2016/09/10/webpack-flow/",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),e("OutboundLink")],1)]),t._v(" "),e("ol",[e("li",[t._v("初始化参数：")])]),t._v(" "),e("p",[t._v("将webpack.config.js配置参数与shell脚本中的参数整合成options参数")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("\t\t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n            entry"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//入口配置")]),t._v("\n            output"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出配置")]),t._v("\n            plugins"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//插件集合(配置文件 + shell指令) ")]),t._v("\n            module"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" loaders"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Object"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//模块配置")]),t._v("\n            context"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//工程路径")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" \n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("开始编译")])]),t._v(" "),e("p",[t._v("用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；")]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("确定入口")])]),t._v(" "),e("p",[t._v("根据配置中的 entry 找出所有的入口文件；")]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[t._v("编译模块")])]),t._v(" "),e("p",[t._v("从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；")]),t._v(" "),e("ol",{attrs:{start:"5"}},[e("li",[t._v("完成模块编译")])]),t._v(" "),e("p",[t._v("在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；")]),t._v(" "),e("ol",{attrs:{start:"6"}},[e("li",[t._v("输出资源")])]),t._v(" "),e("p",[t._v("根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；")]),t._v(" "),e("ol",{attrs:{start:"7"}},[e("li",[t._v("输出完成")])]),t._v(" "),e("p",[t._v("在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。")]),t._v(" "),e("h2",{attrs:{id:"_7-是否写过loader和plugin？描述一下编写loader或plugin的思路？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-是否写过loader和plugin？描述一下编写loader或plugin的思路？","aria-hidden":"true"}},[t._v("#")]),t._v(" 7. 是否写过Loader和Plugin？描述一下编写loader或plugin的思路？")]),t._v(" "),e("ul",[e("li",[t._v("loader:需要把读到的源文件内容转义成新的文件内容，通过返回值的方式将处理后的内容输出，并且每个Loader通过链式操作，将源文件一步步翻译成想要的样子。")]),t._v(" "),e("li",[t._v("plugin: webpack在运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。")])]),t._v(" "),e("h2",{attrs:{id:"_8-webpack的热更新是如何做到的？说明其原理？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-webpack的热更新是如何做到的？说明其原理？","aria-hidden":"true"}},[t._v("#")]),t._v(" 8. webpack的热更新是如何做到的？说明其原理？")]),t._v(" "),e("p",[t._v("在应用程序运行过程中替换、添加或删除模块，而无需重新加载整个页面。"),e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/30669007",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://zhuanlan.zhihu.com/p/30669007"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"_9-如何用webpack来优化前端性能？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-如何用webpack来优化前端性能？","aria-hidden":"true"}},[t._v("#")]),t._v(" 9. 如何用webpack来优化前端性能？")]),t._v(" "),e("ul",[e("li",[t._v("压缩js css代码")]),t._v(" "),e("li",[t._v("提取公共代码进行缓存")]),t._v(" "),e("li",[t._v("code spliting 按需加载")]),t._v(" "),e("li",[t._v("tree shaking 删除不会用到的代码片段")]),t._v(" "),e("li",[t._v("CDN加速利用CDN加速: 在构建过程中，将引用的静态资源路径修改为CDN上对应的路径。可以利用webpack对于output参数和各loader的publicPath参数来修改资源路径？")])]),t._v(" "),e("h2",{attrs:{id:"_10-如何提高webpack的打包速度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-如何提高webpack的打包速度","aria-hidden":"true"}},[t._v("#")]),t._v(" 10. 如何提高webpack的打包速度?")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://louiszhai.github.io/2019/01/04/webpack4/",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),e("OutboundLink")],1)]),t._v(" "),e("ul",[e("li",[t._v("外部扩展(externals): 将不怎么需要更新的第三方库脱离webpack打包，不被打入bundle中，从而减少打包时间,比如jQuery用script标签引入")]),t._v(" "),e("li",[t._v("dll: 采用webpack的 DllPlugin 和 DllReferencePlugin 引入dll，让一些基本不会改动的代码先打包成静态资源,避免反复编译浪费时间")]),t._v(" "),e("li",[t._v("使用Tree-shaking和Scope Hoisting来剔除多余代码")]),t._v(" "),e("li",[t._v("使用webpack-uglify-parallel来提升uglifyPlugin的压缩速度。 原理上webpack-uglify-parallel采用了多核并行压缩来提升压缩速度")])])])}),[],!1,null,null,null);a.default=s.exports}}]);